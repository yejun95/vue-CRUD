#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('back:server');
const http = require('http');

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '8001');
app.set('port', port);

/**
 * Create HTTP server.
 */
// const cors = require('cors');
// app.use(cors());
const server = http.createServer(app);
const io = require('socket.io')(server, {
    cors: {
      origin: "http://localhost:8080",
      methods: ["GET", "POST"],
      allowedHeaders: ["extra-custrom-headeres"],
      credentials: true
    },
      allowEIO3: true  // socket io의 버전이 3.* 버전인데 2.* 버전과도 통신 가능하도록 설정을 잡아주는 부분입
}); // 해당 서버를 소켓 서버로 설정

// connection event handler
io.on('connection', function(socket) {
  console.log('유저 접속 됨 ' + socket);
  
  socket.on('chat', function(data) { // 클라이언트로 부터 'chat'이라는 이벤트명을 사용해 메세지를 전달받는다.
    console.log('전달된 메시지 ' + data.message);

    let rtnMessage = {
      message: data.message
    }; 

    // 클라이언트에게 메시지를 전송한다.
    socket.broadcast.emit('chat', rtnMessage); // broadcast : 자신을 제외한 나머지 클라이언트에게 메시지 전달
  });
})

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
